---

- name: Beginning System Level Software Provisioning...
  pause:
    prompt: "Do you wish to proceed? This pause will last 10 seconds. Press Enter to continue or Ctrl+C to skip this provisioning."
    seconds: 10


- name: Creates DevOps Directories
  file:
    path: "{{ '/var/www/' + item.dir }}"
    state: directory
    owner: "{{ instance_user | default('ubuntu') }}"
    group: "{{ instance_user | default('ubuntu') }}"
    mode: "{{ item.permission }}"
  loop:
    - { dir: 'github-tmp', permission: 'u=rwx,g=rx,o=rx' }
    - { dir: 'env-files', permission: 'u=rwx,g=rx,o=rx' }



- name: Project VM - Creates Project Directory
  file:
    path: "{{ '/var/www/' + project_item.dir + '/public' }}"
    state: directory
    owner: "{{ instance_user | default('ubuntu') }}"
    group: "{{ instance_user | default('ubuntu') }}"
  loop:
    - { domain: "{{ domain }}", dir: "{{ project }}" }
    - { domain: "{{ 'core.' + domain }}", dir: "{{ 'core_' + project }}" }
  loop_control:
    loop_var: project_item

- name: Project VM - Creates Project Index (with Content)
  template:
    src: "templates/php.j2"
    dest: "{{ '/var/www/' + folder_item.dir + '/public/index.php' }}"
  vars:
    template_domain: "{{ folder_item.domain }}"
    template_port: ""
  loop:
    - { domain: "{{ domain }}", dir: "{{ project }}" }
  loop_control:
    loop_var: folder_item



  
- name: Extract AWS_ACCESS_KEY_ID from Credentials
  set_fact:
    aws_access_key_id: "{{ credential_pairs | select('match', extract_key_a + ':.*') | map('regex_replace', extract_key_a + ':', '') | list | first }}"
  when: extract_key_a in credential_pairs | join('\n')
  vars:
    extract_key_a: "aws_access_key_id"
  when: iaas_provider == "aws"

- name: Extract AWS_ACCESS_KEY_SECRET from Credentials
  set_fact:
    aws_access_key_secret: "{{ credential_pairs | select('match', extract_key_s + ':.*') | map('regex_replace', extract_key_s + ':', '') | list | first }}"
  when: extract_key_s in credential_pairs | join('\n')
  vars:
    extract_key_s: "aws_access_key_secret"
  when: iaas_provider == "aws"

- name: Extract AWS_ACCESS_REGION from Credentials
  set_fact:
    aws_region: "{{ credential_pairs | select('match', extract_key_r + ':.*') | map('regex_replace', extract_key_r + ':', '') | list | first }}"
  when: extract_key_r in credential_pairs | join('\n')
  vars:
    extract_key_r: "region"
  when: iaas_provider == "aws"

- name: Extract DIGITAL OCEAN TOKEN from Credentials
  set_fact:
    do_token: "{{ credential_pairs | select('match', extract_key_t + ':.*') | map('regex_replace', extract_key_t + ':', '') | list | first }}"
  when: extract_key_t in credential_pairs | join('\n')
  vars:
    extract_key_t: "do_token"
  when: iaas_provider == "do"






- name: Project Compute - Install Nginx Web Server (PHP)
  include_role:
    name: geerlingguy.nginx
  vars:
    nginx_vhosts:
      - listen: "80"
        server_name: "{{ vhost_item.server_name }}"
        #server_name_redirect: "www.{{ domain }}"
        root: "{{ '/var/www/' + vhost_item.dir + '/public' }}"
        index: "index.php index.html index.htm"
#            error_page: ""
        access_log: "/var/log/nginx/access_{{ vhost_item.domain }}.log"
        error_log: "/var/log/nginx/error_{{ vhost_item.domain }}.log"
        state: "present"
        template: "{{ nginx_vhost_template }}"
        filename: "{{ vhost_item.domain }}.conf"
        extra_parameters: |
          location / {
              try_files $uri $uri/ /index.php$is_args$args;

              # default cors
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              add_header Access-Control-Allow-Origin "$http_origin" always;
              add_header Access-Control-Allow-Credentials "true" always;
              add_header Access-Control-Allow-Methods "OPTIONS, DELETE, POST, GET, PATCH, PUT" always;
              #add_header Access-Control-Allow-Headers "Content-Type";
              add_header Access-Control-Allow-Headers "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With" always;
              # required to be able to read Authorization header in frontend
              #add_header 'Access-Control-Expose-Headers' 'Authorization' always;

          }

          # protect ENV files
          location ~ /\.env {
              deny all;
          }
          
          location ~ \.php$ {
              try_files $uri /index.php =404;
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              fastcgi_pass {{ php_cgi }};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              include fastcgi_params;
          }
  loop:
    - { domain: "{{ domain }}", dir: "{{ project }}", server_name: "{{ domain }} {{  '*.' + domain }}" }
  loop_control:
    loop_var: vhost_item



- name: Project Compute - Install Certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_install_method: snap
    certbot_auto_renew_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    certbot_auto_renew_hour: "3"
    certbot_auto_renew_minute: "30"
    certbot_auto_renew_options: "--quiet --no-self-upgrade"
    certbot_create_if_missing: true
    certbot_create_method: standalone
    certbot_certs:
      - email: "dev@hostville.website"
        webroot: "{{ '/var/www/' + project + '/public' }}"
        domains:
          - "{{ domain }}"
    certbot_create_standalone_stop_services:
      - nginx
  when: edition == "business"

- name: Install Wildcard Certificate (for Enterprise Edition) with AWS Route53 Plugin
  shell: |
    sudo snap set certbot trust-plugin-with-root=ok
    sudo snap install certbot-dns-route53
    sudo AWS_ACCESS_KEY_ID="{{ aws_access_key_id }}" AWS_SECRET_ACCESS_KEY="{{ aws_access_key_secret }}" AWS_DEFAULT_REGION="{{ aws_region }}" certbot certonly --dns-route53 -d {{ domain }} -d *.{{ domain }} -d *.store.{{ domain }} --agree-tos -m dev@hostville.website
    sudo AWS_ACCESS_KEY_ID="{{ aws_access_key_id }}" AWS_SECRET_ACCESS_KEY="{{ aws_access_key_secret }}" AWS_DEFAULT_REGION="{{ aws_region }}" certbot certonly --dns-route53 -d core.{{ domain }} --agree-tos -m dev@hostville.website
  register: wildcard_output
  async: 300
  poll: 30
  when: edition == "enterprise" and iaas_provider == "aws"

- name: Install Wildcard Certificate (for Enterprise Edition) with Digital Ocean  (Prequisites)
  shell: |
    sudo snap set certbot trust-plugin-with-root=ok
    sudo snap install certbot-dns-digitalocean
    echo "dns_digitalocean_token = {{ do_token }}" | sudo tee /var/www/digitalocean.ini
    sudo chmod 600 /var/www/digitalocean.ini
    #sudo certbot certonly --dns-digitalocean --dns-digitalocean-credentials /var/www/digitalocean.ini -d {{ domain }} -d *.{{ domain }} -d *.store.{{ domain }} --agree-tos -m dev@hostville.website
    #sudo certbot certonly --dns-digitalocean --dns-digitalocean-credentials /var/www/digitalocean.ini -d core.{{ domain }} --agree-tos -m dev@hostville.website
  register: wildcard_output
  async: 300
  poll: 30
  when: edition == "enterprise" and iaas_provider == "do"

- name: Install Wildcard Certificate (for Enterprise Edition) with Digital Ocean Plugin (Hub, Store & Subdomains)
  expect:
    command: sudo certbot certonly --dns-digitalocean --dns-digitalocean-credentials /var/www/digitalocean.ini -d {{ domain }} -d *.{{ domain }} --agree-tos -m dev@hostville.website
    responses:
        "You have an existing certificate ": "1"
        "share your email address with the Electronic Frontier Foundation,": "N"
  become: true
  ignore_errors: true
  async: 300
  poll: 30


- name: Project Compute - Install Nginx Web Server (PHP) (Secure)
  include_role:
    name: geerlingguy.nginx
  vars:
    nginx_vhosts:
      - listen: "443 ssl http2"
        server_name: "{{ vhost_ssl_item.server_name }}"
        #server_name_redirect: "www.{{ domain }}"
        root: "{{ '/var/www/' + vhost_ssl_item.dir + '/public' }}"
        index: "index.php index.html index.htm"
#            error_page: ""
        access_log: "/var/log/nginx/access_{{ vhost_ssl_item.domain }}_ssl.log"
        error_log: "/var/log/nginx/error_{{ vhost_ssl_item.domain }}_ssl.log"
        state: "present"
        template: "{{ nginx_vhost_template }}"
        filename: "{{ vhost_ssl_item.domain }}_ssl.conf"
        extra_parameters: |
          location / {
              try_files $uri $uri/ /index.php$is_args$args;

              # default cors
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              add_header Access-Control-Allow-Origin "$http_origin" always;
              add_header Access-Control-Allow-Credentials "true" always;
              add_header Access-Control-Allow-Methods "OPTIONS, DELETE, POST, GET, PATCH, PUT" always;
              #add_header Access-Control-Allow-Headers "Content-Type";
              add_header Access-Control-Allow-Headers "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With" always;
              # required to be able to read Authorization header in frontend
              #add_header 'Access-Control-Expose-Headers' 'Authorization' always;

          }

          # protect ENV files
          location ~ /\.env {
              deny all;
          }
          
          location ~ \.php$ {
              try_files $uri /index.php =404;
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              fastcgi_pass {{ php_cgi }};
              fastcgi_index index.php;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              include fastcgi_params;
          }

          ssl_certificate {{ '/etc/letsencrypt/live/' + vhost_ssl_item.domain + '/fullchain.pem' }};
          ssl_certificate_key {{ '/etc/letsencrypt/live/' + vhost_ssl_item.domain + '/privkey.pem' }};
          ssl_protocols       TLSv1.1 TLSv1.2;
          ssl_ciphers         HIGH:!aNULL:!MD5;
  loop:
    - { domain: "{{ domain }}", dir: "{{ project }}", server_name: "{{ domain }} {{  '*.' + domain }}" }
  loop_control:
    loop_var: vhost_ssl_item


- name: Project Compute - Install PHP Versions
  include_role:
    name: geerlingguy.php-versions
  vars:
    php_version: "{{ php_version_number }}"


- name: Project Compute - Install PHP
  include_role:
    name: geerlingguy.php
  vars:
    php_packages: "{{ php_packages_list }}"
    php_enable_php_fpm: true
    php_fpm_state: started
    php_fpm_enabled_on_boot: true
    php_fpm_handler_state: restarted
    php_webserver_daemon: "nginx"
    php_default_version_debian: "{{ php_version_number }}"
    php_version: "{{ php_version_number }}"
    php_sendmail_path: "{{ mail_mailhog_path + '/mhsendmail' }}"

- name: Project Compute - Install Composer
  include_role:
    name: geerlingguy.composer

- name: Project Compute - Install MySQL
  include_role:
    name: geerlingguy.mysql
    apply:
      become: yes
  vars:
    mysql_root_username: "{{ mysql_root_user }}"
    mysql_root_password: "{{ mysql_root_pass }}"


- name: Create new Databases
  when: edition == "education"
  community.mysql.mysql_db:
    name:
      - "sample_db"
    state: present


- name: Create database user with database privileges
  when: edition == "education"
  community.mysql.mysql_user:
    host: localhost
    name: "root"
    password: "{{ mysql_pass }}"
    priv:
      "sample_db.*": 'ALL,GRANT'
    state: present


- name: Re-Grant Database Privileges for LMS and University
  when: edition == "education"
  shell: |
    mysql -u {{ root }} -p{{ mysql_root_pass }} -e "GRANT ALL PRIVILEGES ON {{ db_item.db }}.* TO '{{ db_item.usr }}'@'localhost'; FLUSH PRIVILEGES;"
  loop:
    - { db: "sample_db", usr: "{{ mysql_user }}" }
  loop_control:
    loop_var: db_item
  ignore_errors: true
  become: true


- name: Project Compute - Install & Configure Supervisor for Queue
  include_role:
    name: geerlingguy.supervisor
  vars:
    # supervisor_user: root
    # supervisor_password: 'my_secret_password'
    # supervisor_unix_http_server_password_protect: true
    # supervisor_inet_http_server_password_protect: true
    # supervisor_unix_http_server_enable: true
    # supervisor_unix_http_server_socket_path: /var/run/supervisor.sock
    supervisor_programs:
      - name: 'dorcas-worker'
        command: sudo php /var/www/core_{{ project }}/artisan queue:work redis --sleep=3 --tries=3
        state: present
        configuration: |
          autostart=true
          autorestart=true
          startretries=3
          startsecs=1
          redirect_stderr=true
          stdout_logfile=/var/www/core_{{ project }}/storage/logs/dorcas-worker.log
          user=www-data
          killasgroup=true
          stopasgroup=true
  when: first_time_setup