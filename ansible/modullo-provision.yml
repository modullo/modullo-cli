---
- name: MODULLO PROVISIONING
  hosts: compute
  gather_facts: true
  vars_files:
    - group_vars/all.yml
  remote_user: root
  become: true
  become_user: root
  vars:
    - params_path_project: "projects/{{ project }}/{{ project }}.params"
    - params_path_infrastructure: "projects/{{ project }}/parameters_infrastructure"
    - params_path_provisioning: "projects/{{ project }}/parameters_provisioning"
    
  tasks:
    - name: Project VM - Allow Propagation Delay
      pause:
        seconds: 120

    - name: Project VM - Set HostName
      command: hostnamectl --no-ask-password set-hostname modullo_{{ project }}
      
    - include_vars: vars/{{ project }}.yml


    - name: Extracting provisioning variables from file
      shell: "cat {{ setup_root }}/{{ params_path_provisioning }}"
      register: file_content_params_provisioning

    - name: Set variables from file content
      set_fact:
        "config_{{ item.split(':')[0] }}": "{{ item.split(':')[1] }}"
      with_items: "{{ file_content_params_provisioning.stdout_lines }}"

    - name: Print variables
      debug:
        var: "config_{{ item }}"
      with_items:
        - provisioning_type
        - provisioning_software_os

    - name: Print the Infrastructure Provider
      ansible.builtin.debug:
        msg: Infrastructure Provider is {{ iaas_provider }}



    #------------------------------------------------------
    # Perform OS Level Software Provisioning
    #------------------------------------------------------
    - name: Decide OS Level Software Provisioning
      set_fact:
        config_provisioning_software_os: "yes"
      # when: provisioning_software_os is defined and provisioning_software_os != '' (We can link with external config later)

    - name: Perform OS Level Software Provisioning
      include_tasks: includes/provisioning_os.yml
      when: config_provisioning_software_os == "yes"


    #------------------------------------------------------
    # Perform System Level Software Provisioning
    #------------------------------------------------------
    - name: Decide System Level Software Provisioning
      set_fact:
        config_provisioning_software_system: "yes"
      # when: provisioning_software_system is defined and provisioning_software_system != '' (We can link with external config later)

    - name: Perform System Level Software Provisioning
      include_tasks: includes/provisioning_system.yml
      when: config_provisioning_software_system == "yes"


    #------------------------------------------------------
    # Perform Franework Level Software Provisioning
    #------------------------------------------------------
    - name: Decide Framework Level Software Provisioning
      set_fact:
        config_provisioning_software_framework: "yes"
      # when: provisioning_software_framework is defined and provisioning_software_framework != '' (We can link with external config later)

    - name: Perform Framework Level Software Provisioning
      include_tasks: includes/provisioning_framework.yml
      when: config_provisioning_software_framework == "yes"


    - name: Stop
      pause:
        seconds: 50000
      



    - name: Copy Credentials File (from Control to Compute Machine)
      copy:
        src: "{{ setup_root }}/{{ params_path_infrastructure }}"
        dest: /var/www/params_path_credentials

    - name: Read Credentials File (from Compute Machine)
      slurp:
        src: /var/www/params_path_credentials
      register: params_path_credentials_file_content
      ignore_errors: true

    - name: Parse key-value pairs from Credentials File
      set_fact:
        credential_pairs: "{{ (params_path_credentials_file_content.content | b64decode).split('\n') }}"
      when: params_path_credentials_file_content.content is defined

    - name: Extract Provider from Credentials
      set_fact:
        iaas_provider: "{{ credential_pairs | select('match', extract_key + ':.*') | map('regex_replace', extract_key + ':', '') | list | first }}"
      when: extract_key in credential_pairs | join('\n')
      vars:
        extract_key: "iaas_provider"







    - name: Copy Credentials File (from Control to Compute Machine)
      copy:
        src: "{{ setup_root }}/{{ params_path_infrastructure }}"
        dest: /var/www/params_path_credentials

    - name: Read Credentials File (from Compute Machine)
      slurp:
        src: /var/www/params_path_credentials
      register: params_path_credentials_file_content
      ignore_errors: true

    - name: Parse key-value pairs from Credentials File
      set_fact:
        credential_pairs: "{{ (params_path_credentials_file_content.content | b64decode).split('\n') }}"
      when: params_path_credentials_file_content.content is defined



