---
- name: MODULLO PROVISIONING
  hosts: compute
  gather_facts: true
  vars_files:
    - group_vars/all.yml
  remote_user: root
  become: true
  become_user: root
  vars:
    - params_path_project: "projects/{{ project }}/{{ project }}.params"
    - params_path_infrastructure: "projects/{{ project }}/parameters_infrastructure"
    - params_path_provisioning: "projects/{{ project }}/parameters_provisioning"
    
  tasks:
    - name: Project VM - Allow Propagation Delay
      pause:
        seconds: 60

    - name: Project VM - Set HostName
      command: hostnamectl --no-ask-password set-hostname modullo_{{ project }}
      
    - include_vars: vars/{{ project }}.yml


    #------------------------------------------------------
    # Extract & Setup Infrastructure Credentials
    #------------------------------------------------------

    - name: Copy Infrastructure Credentials File (from Control to Compute Machine)
      copy:
        src: "{{ setup_root }}/{{ params_path_infrastructure }}"
        dest: ~/params_infrastructure

    - name: Read Infrastructure Credentials File (from Compute Machine)
      slurp:
        src: ~/params_infrastructure
      register: file_content_params_infrastructure
      ignore_errors: true

    - name: Set variables from Infrastructure Credentials File
      set_fact:
        "{{ item.split(':')[0] }}": "{{ item.split(':')[1] }}"
      with_items: "{{ file_content_params_infrastructure.content | b64decode | split('\n') }}"
      when: "':' in item"


    #------------------------------------------------------
    # Extract & Setup Provisioning Credentials
    #------------------------------------------------------

    - name: Copy Provisioning Credentials File (from Control to Compute Machine)
      copy:
        src: "{{ setup_root }}/{{ params_path_provisioning }}"
        dest: ~/params_provisioning

    - name: Read Provisioning Credentials File (from Compute Machine)
      slurp:
        src: ~/params_provisioning
      register: file_content_params_provisioning
      ignore_errors: true

    - name: Set variables from Provisioning Credentials File
      set_fact:
        "{{ item.split(':')[0] }}": "{{ item.split(':')[1] }}"
      with_items: "{{ file_content_params_provisioning.content | b64decode | split('\n') }}"
      when: "':' in item"


    - name: Print the Infrastructure Provider
      ansible.builtin.debug:
        msg: Infrastructure Provider is {{ infrastructure_iaas_provider }}


    - name: Provision non-root user (on root user systems)
      shell: |
        adduser --disabled-password --gecos "" --shell /bin/bash --home /home/modullo/ modullo
        usermod -aG sudo modullo
        #su - modullo

        # sudo cp /etc/sudoers /etc/sudoers.bak
        # sudo sed -i '/^root/ a\modullo ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers

        sudo sh -c 'echo "modullo ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/modullo'
        sudo chmod 440 /etc/sudoers.d/modullo

      when: infrastructure_iaas_provider == "do" or instance_user == "root"

    #------------------------------------------------------
    # Perform OS Level Software Provisioning
    #------------------------------------------------------
    - name: Decide OS Level Software Provisioning
      set_fact:
        config_provisioning_software_os: "yes"
      # when: provisioning_software_os is defined and provisioning_software_os != '' (We can link with external config later)

    - name: Perform OS Level Software Provisioning
      include_tasks: includes/provisioning_os.yml
      when: config_provisioning_software_os == "yes" or config_provisioning_software_os == true


    #------------------------------------------------------
    # Perform System Level Software Provisioning
    #------------------------------------------------------
    - name: Decide System Level Software Provisioning
      set_fact:
        config_provisioning_software_system: "yes"
      # when: provisioning_software_system is defined and provisioning_software_system != '' (We can link with external config later)

    - name: Perform System Level Software Provisioning
      include_tasks: includes/provisioning_system.yml
      when: config_provisioning_software_system == "yes" or config_provisioning_software_system == true


    #------------------------------------------------------
    # Perform Franework Level Software Provisioning
    #------------------------------------------------------
    - name: Decide Framework Level Software Provisioning
      set_fact:
        config_provisioning_software_framework: "yes"
      # when: provisioning_software_framework is defined and provisioning_software_framework != '' (We can link with external config later)

    - name: Perform Framework Level Software Provisioning
      include_tasks: includes/provisioning_framework.yml
      when: config_provisioning_software_framework == "yes" or config_provisioning_software_framework == true

